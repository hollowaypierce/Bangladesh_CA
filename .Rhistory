ggtitle("Spatial Distribution of Non-White Populations by Block Group")
#map it
Durm_non_white %>%
ggplot(aes(fill = envr_just_com, name = "Percent non-white")) +
geom_sf() +
ggtitle("Spatial Distribution of Non-White Populations by Block Group")
c
#map it
Durm_non_white %>%
ggplot(aes(fill = envr_just_com)) +
geom_sf() +
ggtitle("Spatial Distribution of Non-White Populations by Block Group")
Durm_non_white <- Durm_non_white %>%
mutate(envr_just_com = ifelse(pct_non_white > 54,1,0))
#map it
Durm_non_white %>%
ggplot(aes(fill = envr_just_com)) +
geom_sf() +
ggtitle("Spatial Distribution of Non-White Populations by Block Group")
#map it
Durm_non_white %>%
ggplot(aes(fill = envr_just_com)) +
geom_sf() +
ggtitle("Block Groups with non_white populations above county average")
#determine households with no cars
no_car <- c(no_car = "B08014_002")
durm_cars <- get_acs(state = "NC", county = "Durham", geography = "tract",
variables = no_car, geometry = TRUE,
year = 2020, summary_var = "B08014_001")
durm_cars %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
facet_wrap(~variable) +
geom_sf(color = NA) +
scale_fill_viridis_c()
durm_cars %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
facet_wrap(~variable) +
geom_sf(color = NA) +
scale_fill_viridis_c()
durm_cars %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
facet_wrap(~variable) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Percent") +
ggtitle("Percent of homes with no vechiles by Census tract")
durm_cars %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Percent") +
ggtitle("Percent of homes with no vechiles by Census tract")
durm_cars %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Percent") +
ggtitle("Percent of Homes with no Vehicles by Census tract")
non_white_dist <- Durm_non_white %>%
st_buffer(10) %>% # Fasterize only works with polygons, so we create tiny buffers around the points
fasterize(raster= template_raster) %>%
gridDistance(origin=1) %>% # Check ?fasterize especially the `field argument on why origin is 1.
mask(lu_raster) %>%
reclassify(rcl = matrix(c(0,1000,1, 1000,2000,2, 2000,4000,3, 4000,8000,4, 8000,Inf,5), ncol=3, byrow = T), include.lowest =T)
p1 <- non_white_dist %>% ratify %>% levelplot(att="ID", main = "Distance from Schools", col.regions=brewer.pal(6, "PuRd"))
non_white_dist <- Durm_non_white %>%
fasterize(raster= template_raster) %>%
gridDistance(origin=1) %>% # Check ?fasterize especially the `field argument on why origin is 1.
mask(lu_raster) %>%
reclassify(rcl = matrix(c(0,1000,1, 1000,2000,2, 2000,4000,3, 4000,8000,4, 8000,Inf,5), ncol=3, byrow = T), include.lowest =T)
p1 <- non_white_dist %>% ratify %>% levelplot(att="ID", main = "Distance from Schools", col.regions=brewer.pal(6, "PuRd"))
View(non_white_dist)
p1 <- non_white_dist %>%
ratify %>%
levelplot(att="ID", main = "Distance from Above Averge Non-White Communites", col.regions=brewer.pal(6, "PuRd"))
View(non_white_dist)
p <- plot(st_geometry(Durm_non_white[envr_just_com == 1]))
p <- plot(st_geometry(Durm_non_white[pct_non_white > 54]))
p <- plot(Durm_non_white[pct_non_white > 54])
plot(Durm_non_white[pct_non_white > 54])
plot(Durm_non_white$pct_non_white > 54)
Durm_non_white[pct_non_white>54] %>%
ggplot(aes(fill = envr_just_com)) +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
Durm_non_white$pct_non_white > 54 %>%
ggplot(aes(fill = envr_just_com)) +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
Durm_non_white$pct_non_white > 54 %>%
ggplot() +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
Durm_non_whit %>%
Durm_non_white$pct_non_white > 54
Durm_non_whit %>%
Durm_non_white$pct_non_white > 54 %>%
ggplot() +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
Durm_environmental_justice_pops <- Durm_non_white %>%
filter(pct_non_white > 54)
View(Durm_environmental_justice_pops)
non_white_dist <- Durm_environmental_justice_pops %>%
fasterize(raster= template_raster) %>%
gridDistance(origin=1) %>% # Check ?fasterize especially the `field argument on why origin is 1.
mask(lu_raster) %>%
reclassify(rcl = matrix(c(0,1000,1, 1000,2000,2, 2000,4000,3, 4000,8000,4, 8000,Inf,5),
ncol=3, byrow = T), include.lowest =T)
p1 <- non_white_dist %>%
ratify %>%
levelplot(att="ID", main = "Distance from Above Averge Non-White Communites", col.regions=brewer.pal(6, "PuRd"))
ggplot(aes() +
Durm_environmental_justice_pops %>%
Durm_environmental_justice_pops %>%
ggplot(aes()) +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
Durm_environmental_justice_pops %>%
Durm_environmental_justice_pops %>%
ggplot(aes(fill = pct_non_white)) +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
#map it
Durm_non_white %>%
ggplot(aes(fill = envr_just_com)) +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
scale_color_manual(c(values=c("#999999","#000000"))
#map it
Durm_non_white %>%
#map it
Durm_non_white %>%
ggplot(aes(fill = envr_just_com)) +
scale_color_manual(c(values=c("#999999","#000000"))) +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
non_white_dist <- Durm_environmental_justice_pops %>%
fasterize(raster= template_raster) %>%
gridDistance(origin=1) %>% # Check ?fasterize especially the `field argument on why origin is 1.
mask(lu_raster) %>%
reclassify(rcl = matrix(c(0,1000,1, 1000,2000,2, 2000,4000,3, 4000,8000,4, 8000,Inf,5),
ncol=3, byrow = T), include.lowest =T)
p1 <- non_white_dist %>%
ratify %>%
levelplot(att="ID", main = "Distance from Above Averge Non-White Communites", col.regions=brewer.pal(6, "PuRd"))
View(durm_income)
durm_income <- durm_income %>%
mutate(pct_lund_pov = 100 * ((summary_est - estimate) / summary_est))
durm_income$pct_lund_pov %>%
mean(na.rm=TRUE)
durm_income$pct_lund_pov %>%
median(na.rm=TRUE)
durm_income <- durm_income %>%
mutate(pct_lund_pov = 100 * ((estimate) / summary_est))
durm_income$pct_lund_pov %>%
mean(na.rm=TRUE)
durm_income$pct_lund_pov %>%
median(na.rm=TRUE)
durm_income$pct_lund_pov %>%
mean(na.rm=TRUE)
durm_income$pct_lund_pov %>%
median(na.rm=TRUE)
durm_income <- durm_income %>%
mutate(low_income = ifelse(pct_lund_pov => 18, 1, 0))
durm_income <- durm_income %>%
mutate(low_income = ifelse(pct_lund_pov >= 18, 1, 0))
#determine households with low income
income <- c(below_100_pov = "B05010_002") #Below 100 percent of the poverty level
durm_income <- get_acs(state = "NC", county = "Durham", geography = "tract",
variables = income, geometry = TRUE,
year = 2020, summary_var = "B05010_001")
durm_income <- durm_income %>%
mutate(pct_lund_pov = 100 * ((estimate) / summary_est))
#map it
durm_income %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Population 100 percent of the poverty level") +
ggtitle("Spatial Distribution of Low-income Populations by Block Group")
#map it
durm_income %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Population 100 percent of the poverty level") +
ggtitle("Spatial Distribution of Low-income Populations by Block Group")
durm_income <- get_acs(state = "NC", county = "Durham", geography = "block group",
variables = income, geometry = TRUE,
year = 2020, summary_var = "B05010_001")
durm_income <- get_acs(state = "NC", county = "Durham", geography = "block group",
variables = income, geometry = TRUE,
year = 2020, summary_var = "B05010_001")
durm_income <- durm_income %>%
mutate(pct_lund_pov = 100 * ((estimate) / summary_est))
#map it
durm_income %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Population 100 percent of the poverty level") +
ggtitle("Spatial Distribution of Low-income Populations by Block Group")
durm_income <- get_acs(state = "NC", county = "Durham", geography = "tract",
variables = income, geometry = TRUE,
year = 2020, summary_var = "B05010_001")
#determine households with no cars
no_car <- c(no_car = "B08014_002")
durm_cars <- get_acs(state = "NC", county = "Durham", geography = "tract",
variables = no_car, geometry = TRUE,
year = 2020, summary_var = "B08014_001")
durm_cars %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Percent") +
ggtitle("Percent of Homes with no Vehicles by Census tract")
durm_cars %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Percent") +
ggtitle("Percent of Homes with no Vehicles by Census tract")
View(durm_cars)
durm_cars <- durm_cars %>%
mutate(pct_no_car = 100 * ((estimate) / summary_est))
durm_cars$pct_no_car %>%
mean(na.rm=TRUE)
durm_cars$pct_no_car %>%
median(na.rm=TRUE)
durm_cars$pct_no_car %>%
quantile(0.75)
durm_cars$pct_no_car %>%
quantile(0.75, na.rm=TRUE)
durm_cars$pct_no_car %>%
mean(na.rm=TRUE)
durm_cars$pct_no_car %>%
median(na.rm=TRUE)
durm_cars$pct_no_car %>%
quantile(0.75, na.rm=TRUE)
durm_cars %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Percent") +
ggtitle("Percent of Homes with no Vehicles by Census tract")
durm_cars$pct_no_car %>%
quantile(0.9, na.rm=TRUE)
durm_cars$pct_no_car %>%
quantile(0.8, na.rm=TRUE)
durm_cars$pct_no_car %>%
quantile(0.9, na.rm=TRUE)
durm_cars <- durm_cars %>%
mutate(no_car_com = ifelse(pct_no_car >= 10, 1, 0))
#determine non_English speakers
non_english <- c(non_english ="B06007_008") #Speak other languages:!!Speak English less than "very well")
durm_english <- get_acs(state = "NC", county = "Durham", geography = "tract",
variables = non_english, geometry = TRUE,
year = 2020, summary_var = "B06007_001")
View(durm_english)
durm_english <- durm_english %>%
mutate(pct_limited_english = 100 * (estimate  / summary_est))
durm_english %>%
ggplot(aes(fill = pct_limited_english)) +
geom_sf(color = NA) +
scale_fill_viridis_c()
durm_english$pct_limited_english %>%
mean(na.rm=TRUE)
durm_english$pct_limited_english %>%
median(na.rm=TRUE)
durm_english$pct_limited_english %>%
quantile(0.9, na.rm=TRUE)
durm_english$pct_limited_english %>%
quantile(0.75, na.rm=TRUE)
durm_english$pct_limited_english %>%
mean(na.rm=TRUE)
median(na.rm=TRUE)
durm_english$pct_limited_english %>%
mean(na.rm=TRUE) %>%
median(na.rm=TRUE)
durm_english$pct_limited_english %>%
quantile(0.75, na.rm=TRUE)
durm_english$pct_limited_english %>%
mean(na.rm=TRUE) %>%
median(na.rm=TRUE) %>%
quantile(0.75, na.rm=TRUE)
durm_english$pct_limited_english %>%
mean(na.rm=TRUE) +
median(na.rm=TRUE) +
quantile(0.75, na.rm=TRUE)
durm_english$pct_limited_english %>%
mean(na.rm=TRUE) %>%
median(na.rm=TRUE)
durm_english$pct_limited_english %>%
quantile(0.75, na.rm=TRUE)
durm_english$pct_limited_english %>%
mean(na.rm=TRUE)
durm_english$pct_limited_english %>%
median(na.rm=TRUE)
durm_english$pct_limited_english %>%
mean(na.rm=TRUE)
durm_english$pct_limited_english %>%
median(na.rm=TRUE)
durm_english$pct_limited_english %>%
quantile(0.75, na.rm=TRUE)
durm_english$pct_limited_english %>%
quantile(0.8, na.rm=TRUE)
durm_english <- durm_english %>%
mutate(limit_eng = ifelse(pct_limited_english >= 3, 1, 0))
Durm_non_white <- Durm_non_white %>%
mutate(envr_just_com = ifelse(pct_non_white > 54,1,0))
#map it
Durm_non_white %>%
ggplot(aes(fill = envr_just_com)) +
scale_color_manual(c(values=c("#999999","#000000"))) +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
Durm_environmental_justice_pops <- Durm_non_white %>%
filter(pct_non_white > 54)
Durm_environmental_justice_pops %>%
ggplot(aes(fill = pct_non_white)) +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
Durm_non_white_pops <- Durm_non_white %>%
filter(pct_non_white > 54)
Durm_non_white_pops %>%
ggplot(aes(fill = pct_non_white)) +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
?fasterize
?gridDistance
non_white_dist <- Durm_non_white_pops %>%
fasterize(raster= template_raster) %>%
gridDistance(origin=1) %>%
mask(lu_raster) %>%
reclassify(rcl = matrix(c(0,1000,1, 1000,2000,2, 2000,4000,3, 4000,8000,4, 8000,Inf,5),
ncol=3, byrow = T), include.lowest =T)
plot(non_white_dist)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(rasterVis)
library(sf)
library(tidyverse)
library(tigris)
library(leaflet)
library(skimr)
library(terra)
library(here)
library(plyr)
library(tidycensus)
census_api_key("e7fd09a6b61b29b018bfed62d24c799d142b2d54", install=TRUE, overwrite = TRUE)
#file setup
# Download data from website
here::i_am("Holloway_HW_7.rmd")
# create directory to store downloaded data if not done already
subDir <- "source_data"
newDir <- "derived_data"
if (!dir.exists("source_data")) {
dir.create(file.path(subDir))
}
if (!dir.exists("derived_data")) {
dir.create(file.path(newDir))
}
# download file from internet
url = "https://www.dropbox.com/s/ye4b4hjkxripuon/Archive.zip?dl=1"
dest = here::here("source_data/Archive.zip")
if (!file.exists(dest)) {
download.file(url,dest, mode = "wb")
}
utils::unzip(
"source_data/Archive.zip",
overwrite = TRUE,
exdir = here::here("source_data")
)
outDir<-here::here("source_data/Archive")
# get all the zip files
zipF <- list.files(path = here::here("source_data/Archive"), pattern = "*.zip", full.names = TRUE)
# unzip all your files
ldply(.data = zipF, .fun = unzip, exdir = outDir)
if (file.exists("source_data/Archive.zip")) {
#Delete file if it exists
file.remove("source_data/Archive.zip")
}
if (file.exists(zipF)) {
#Delete file if it exists
file.remove(zipF)
}
lu_raster <- here::here("source_data", "Archive", "c11_37063.img") %>% raster
template_raster <- reclassify(lu_raster, cbind(0, 100, 0), right=FALSE)
project_crs <- crs(lu_raster)
vector_read_fn <- function(x){
if(file.exists(x)){
temp1 <- st_read(x, quiet=TRUE) %>% st_transform(project_crs)
return(temp1)
}
}
options(tigris_use_cache = TRUE)
#Determine appropriate variables
v20 <- load_variables(2020, "acs5", cache = TRUE)
View(v20)
#determine nonwhite population
Durm_non_white <-get_acs(state = "NC", county = "Durham", geography = "block group",
variables = "B03002_003", geometry = TRUE,
year = 2020, summary_var = "B01003_001")
Durm_non_white <- Durm_non_white %>%
mutate(pct_non_white = 100 * ((summary_est - estimate) / summary_est))
#map it
Durm_non_white %>%
ggplot(aes(fill = pct_non_white)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Percent non-white") +
ggtitle("Spatial Distribution of Non-White Populations by Block Group")
#map it
Durm_non_white %>%
ggplot(aes(fill = pct_non_white)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Percent non-white") +
ggtitle("Spatial Distribution of Non-White Populations by Block Group")
Durm_non_white <- Durm_non_white %>%
mutate(envr_just_com = ifelse(pct_non_white > 54,1,0))
#map it
Durm_non_white %>%
ggplot(aes(fill = envr_just_com)) +
scale_color_manual(c(values=c("#999999","#000000"))) +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
Durm_non_white_pops <- Durm_non_white %>%
filter(pct_non_white > 54)
Durm_non_white_pops %>%
ggplot(aes(fill = pct_non_white)) +
geom_sf() +
ggtitle("Block Groups with non-white populations above county average")
#determine households with no cars
no_car <- c(no_car = "B08014_002")
durm_cars <- get_acs(state = "NC", county = "Durham", geography = "tract",
variables = no_car, geometry = TRUE,
year = 2020, summary_var = "B08014_001")
durm_cars <- durm_cars %>%
mutate(pct_no_car = 100 * ((estimate) / summary_est))
durm_cars %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Percent") +
ggtitle("Percent of Homes with no Vehicles by Census tract")
durm_cars %>%
mutate(pct = 100 * (estimate  / summary_est)) %>%
ggplot(aes(fill = pct)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Percent") +
ggtitle("Percent of Homes with no Vehicles by Census tract")
#determine non_English speakers
non_english <- c(non_english ="B06007_008") #Speak other languages:!!Speak English less than "very well")
durm_english <- get_acs(state = "NC", county = "Durham", geography = "tract",
variables = non_english, geometry = TRUE,
year = 2020, summary_var = "B06007_001")
durm_english <- durm_english %>%
mutate(pct_limited_english = 100 * (estimate  / summary_est))
durm_english %>%
ggplot(aes(fill = pct_limited_english)) +
geom_sf(color = NA) +
scale_fill_viridis_c()
durm_english %>%
ggplot(aes(fill = pct_limited_english)) +
geom_sf(color = NA) +
scale_fill_viridis_c(name = "Percent") +
ggtitle("Percent of individuals with Limited English Proficency")
library(tidyverse)
library(sf)
library(spatialreg)
library(spdep)
library(GGally)
library(here)
setwd("D:\\Masters Classes\\Spring_2022\\GEOG 803\\R_Scripts")
here::i_am("02_Regression.R")
mgrid <- st_read(here("source_data","MGrid_Clipped.shp"))
# change distance covariates from unites of meter's to kilometers (div by 1000)
mgrid <- mgrid %>%
mutate(Towns_Dist_km = Towns_Dist / 1000,
Roads_Dist_km = Roads_Dist / 1000,
Water_Dist_km = Water_Dist / 1000,
Parks_Dist_km = Parks_Dist / 1000)
#drop uneeded columns
mgrid <- select(mgrid,-c("X_Coordina","Y_Corrdina", "Towns_Dist", "Roads_Dist", "Water_Dist", "Parks_Dist"))
# summary stats of covariates
summary(mgrid)
#fitting OLS model
summary(ols <- mgrid %>%
st_drop_geometry() %>%
select(-c(OID_,X19_03_sub_)) %>%
#mutate(across(-X19_03_sub_,~log10(.x+0.01))) %>%
lm(data=.,CA_NetLoss ~. ))
# 2019 -2003 OLS model
summary(ols <- mgrid %>%
st_drop_geometry() %>%
select(-c(OID_,X19_03_sub_)) %>%
#mutate(across(-X19_03_sub_,~log10(.x+0.01))) %>%
lm(data=.,CA_NetLoss ~. ))
# NetLoss OLS model
summary(ols <- mgrid %>%
st_drop_geometry() %>%
select(-c(OID_, CA_NetLoss)) %>%
#mutate(across(-X19_03_sub_,~log10(.x+0.01))) %>%
lm(data=.,X19_03_sub_  ~. ))
# 2019 -2003 OLS model
summary(ols <- mgrid %>%
st_drop_geometry() %>%
select(-c(OID_,X19_03_sub_)) %>%
#mutate(across(-X19_03_sub_,~log10(.x+0.01))) %>%
lm(data=.,CA_NetLoss ~. ))
